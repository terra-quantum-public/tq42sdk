name: CI & CD

on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths-ignore:
      - "docs/**"
      - "images/**"
      - "notebooks/**"
    branches:
      - "main"
  push:
    paths-ignore:
      - "docs/**"
      - "images/**"
      - "notebooks/**"
    branches:
      - "main"

jobs:
  styles:
    name: "Lint and format"
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Install package
        run: poetry install --only=styles

      - name: Lint by using make lint target
        run: make lint

      - name: Format by using make format target
        run: make format
  test:
    name: "Matrix testing"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: [ "3.8", "3.9", "3.10", "3.11", "3.12" ]

    permissions:
      contents: 'write'
      id-token: 'write'

    steps:
      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Authenticate with GCP
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: access_token
          workload_identity_provider: 'projects/812757215434/locations/global/workloadIdentityPools/identitypool-global/providers/provider-github'
          service_account: 'serviceaccount-github-actions@cryptic-hawk-387713.iam.gserviceaccount.com'
          access_token_lifetime: 300s
          create_credentials_file: true

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Setup gcp-auth
        run: make setup-auth

      - name: Install package
        run: poetry install

      - name: Test by using make test target
        run: poetry run make test

  cd:
    name: "Build & publish"
    runs-on: ubuntu-latest
    needs:
      - styles
      - test

    permissions:
      contents: 'write'
      id-token: 'write'

    if: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

    steps:
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Authenticate with GCP
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: access_token
          workload_identity_provider: 'projects/812757215434/locations/global/workloadIdentityPools/identitypool-global/providers/provider-github'
          service_account: 'serviceaccount-github-actions@cryptic-hawk-387713.iam.gserviceaccount.com'
          access_token_lifetime: 300s
          create_credentials_file: true

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Setup gcp-auth
        run: make setup-auth

      - name: Install package
        run: poetry install

      - name: Build lib for release
        run: poetry build

      - name: Publish package to GCP artifact registry
        run: |
          poetry config repositories.gcp-registry ${{ secrets.TQ_GCP_ARTIFACT_REGISTRY_UPLOAD }}
          poetry publish -r gcp-registry

      - name: Get grpc client for publishing
        run: |
          poetry run pip install keyrings.google-artifactregistry-auth
          
          poetry run pip download \
            --extra-index-url=${{ secrets.TQ_GCP_ARTIFACT_REGISTRY }} \
            --no-deps \
            --dest dist_grpc \
            --no-binary=:all: \
            tq42-grpc-client==$(poetry run pip show tq42-grpc-client | sed -n -e 's/^.*Version: //p')
          
          poetry run pip download \
            --extra-index-url=${{ secrets.TQ_GCP_ARTIFACT_REGISTRY }} \
            --no-deps \
            --dest dist_grpc \
            tq42-grpc-client==$(poetry run pip show tq42-grpc-client | sed -n -e 's/^.*Version: //p')

      - name: Publish grpc client via twine
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.POETRY_PYPI_TOKEN_PYPI }}
        run: |
          poetry run pip install twine
          poetry run twine upload --skip-existing --non-interactive dist_grpc/*

      - name: Publish package to PYPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.POETRY_PYPI_TOKEN_PYPI }}
        run: |
          poetry publish
